-- P01


CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
	SELECT e.first_name, e.last_name FROM employees AS e
	WHERE e.salary>35000
	ORDER BY e.first_name, e.last_name, e.employee_id;
END



-- P02 

DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above(`needed_salary` DECIMAL(19,4))
BEGIN
	SELECT e.first_name, e.last_name FROM employees AS e
	WHERE e.salary>=`needed_salary`
	ORDER BY e.first_name, e.last_name, e.employee_id;
END $$

-- P03

DELIMITER $$
CREATE PROCEDURE usp_get_towns_starting_with(`string` VARCHAR(20))
BEGIN 
	SELECT t.name FROM towns AS t
	WHERE t.name LIKE CONCAT(`string`,'%')
	ORDER BY t.name;
END $$

CALL usp_get_towns_starting_with ('b');


-- P04 

DELIMITER $$
CREATE PROCEDURE usp_get_employees_from_town(`town_name` VARCHAR(20))
BEGIN
	SELECT e.first_name, e.last_name
	FROM employees AS e 
	JOIN addresses AS a ON e.address_id=a.address_id
	JOIN towns AS t ON t.town_id=a.town_id
	WHERE t.name = `town_name`
	ORDER BY e.first_name, e.last_name, e.employee_id;
END $$
	
CALL usp_get_employees_from_town('Sofia')
	
	
P05:

това работи:
DELIMITER $$
CREATE FUNCTION ufn_get_salary_level(`parameter` DOUBLE(19,4))
RETURNS VARCHAR(8)
BEGIN
	DECLARE result VARCHAR(8);
	IF parameter < 30000 THEN SET result = 'Low';
	ELSEIF parameter <=50000 THEN SET result = 'Average';
	ELSE SET result = 'High';
	END IF;
	RETURN `result`;
END $$

================= Това не работи: ===============
=== Къде бъркам с използването на CASE/WHEN? ====

DELIMITER $$
CREATE FUNCTION ufn_get_salary_level(`parameter` DOUBLE(19,4))
RETURNS VARCHAR(8)
BEGIN
	DECLARE result VARCHAR(8);
	(CASE 
		WHEN `parameter`< 30000
			THEN SET `result` = 'Low'
		WHEN `parameter`>= 30000 AND `parameter` <= 50000 
			THEN SET `result` = 'Average'
		ELSE SET `result` = 'High'
	END)
	RETURN `result`;
END $$
- За да работи тябва да се слагат точки и запетаи! Трябва и присвояването да става с две точки + равно т.е. := 
CREATE FUNCTION ufn_get_salary_level(`parameter` DOUBLE(19,4))
RETURNS VARCHAR(8)
BEGIN
    DECLARE result VARCHAR(8);
    CASE
        WHEN `parameter`< 30000
            THEN SET `result` := 'Low';
        WHEN `parameter`>= 30000 AND `parameter` <= 50000
            THEN SET `result` := 'Average';
        ELSE SET `result` := 'High';
    END CASE;
    RETURN `result`;
END

== P06:

DELIMITER $$
DROP FUNCTION IF EXISTS ufn_get_salary_level;

CREATE FUNCTION ufn_get_salary_level(`parameter` DECIMAL(19,4))
RETURNS VARCHAR(8)
BEGIN
	DECLARE result VARCHAR(8);
	IF parameter < 30000 THEN SET result = 'Low';
	ELSEIF parameter <=50000 THEN SET result = 'Average';
	ELSE SET result = 'High';
	END IF;
	RETURN `result`;
END $$

DELIMITER $$
DROP PROCEDURE IF EXISTS usp_get_employees_by_salary_level;

CREATE PROCEDURE usp_get_employees_by_salary_level(`salary_level` VARCHAR(8))
BEGIN 
	SELECT e.first_name, e.last_name FROM employees AS e
	WHERE ufn_get_salary_level(`salary`) = `salary_level`
	ORDER BY e.first_name DESC, e.last_name DESC;
END $$

CALL usp_get_employees_by_salary_level('High');


-- P07 Define Function RETURN REGEX

CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))  
RETURNS BIT
BEGIN
	RETURN `word` REGEXP(CONCAT('^[', set_of_letters , ']+$'));
END
	
	
-- p08 нямам условие за задачата, само решение (няма я в домашното, задачите са +1 от тук надолу като номeraciq):
 
ALTER TABLE `departments` 
DROP FOREIGN KEY `fk_departments_employees`;
ALTER TABLE `departments` 
DROP INDEX `fk_departments_employees` ;
ALTER TABLE `employees_projects` 
DROP FOREIGN KEY `fk_employees_projects_employees`;
ALTER TABLE `employees` 
DROP FOREIGN KEY `fk_employees_employees`;

DELETE FROM `employees`
WHERE `department_id` IN 
    (SELECT d.department_id FROM `departments` AS d 
     WHERE d.name IN ('Production', 'Production Control'));
DELETE FROM `departments` 
WHERE
    name IN ('Production' , 'Production Control');
	
	
-- P08+1 

CREATE PROCEDURE usp_get_holders_full_name()
BEGIN 
	SELECT CONCAT_WS(' ',a.first_name, a.last_name) AS full_name FROM account_holders AS a
	ORDER BY full_name, a.id;
END

-- P09 +1 

DROP PROCEDURE IF EXISTS usp_get_holders_with_balance_higher_than ;

DELIMITER $$
CREATE PROCEDURE usp_get_holders_with_balance_higher_than (min_balance DECIMAL(19,4))
BEGIN 
	SELECT ah.first_name, ah.last_name
	FROM account_holders AS ah JOIN accounts AS acc ON ah.id= acc.account_holder_id
	GROUP BY ah.first_name, ah.last_name
	HAVING SUM(acc.balance)> min_balance
	ORDER BY acc.id;
END $$

DELIMITER ;

CALL usp_get_holders_with_balance_higher_than (7000);

-- p10 + 1 = 11. Future Value Function

DROP FUNCTION IF EXISTS ufn_calculate_future_value;

DELIMITER $$
CREATE FUNCTION ufn_calculate_future_value (sums DECIMAL(19,4), interest_rate DOUBLE, years INT)
RETURNS DOUBLE(19,2)
BEGIN 
	DECLARE result DOUBLE(19,2);
	SET result := sums * (POW(1+interest_rate,years));
	RETURN result;
END $$

DELIMITER ;

SELECT ufn_calculate_future_value (1000, 0.1, 5);
	
	
	
	====== DO WHILE  (Създава се лейбъл и като се казва енд се казва и кой лейбъл ===
	
	DROP FUNCTION IF EXISTS ufn_calculate_future_value;

DELIMITER $$
CREATE FUNCTION ufn_calculate_future_value (sums DECIMAL(19,4), interest_rate DOUBLE, years INT)
RETURNS DOUBLE(19,2)
BEGIN 
	DECLARE result DOUBLE(19,2);
	SET result := sums;
	label1: WHILE years <> 0 DO 
	SET result := result + (result * interest_rate);
	SET years:= years - 1;
	END WHILE label1;
	RETURN result;
END $$

DELIMITER ;

SELECT ufn_calculate_future_value (1000, 0.1, 5);



	
stignah do tuk: 

