-- 01. DDL - Table Design 

CREATE TABLE users(
id	INT(11) UNSIGNED UNIQUE NOT NULL PRIMARY KEY,
username	VARCHAR(30) UNIQUE,
`password` VARCHAR(50) NOT NULL,
name VARCHAR(50),
gender VARCHAR(1),
birthdate DATETIME,
age INT(11) UNSIGNED,
email	VARCHAR(50) NOT NULL
);

CREATE TABLE departments (
id	INT(11) UNSIGNED UNIQUE PRIMARY KEY,
name VARCHAR(50) NOT NULL
);


CREATE TABLE employees(
id INT(11) UNSIGNED UNIQUE PRIMARY KEY,
first_name VARCHAR(25),
last_name VARCHAR(25),
gender VARCHAR(1),
birthdate DATETIME,
age INT(11) UNSIGNED,
department_id INT(11) UNSIGNED,
CONSTRAINT fk_department_id FOREIGN KEY (department_id)
REFERENCES departments(id)
);


CREATE TABLE categories(
id	INT(11) UNSIGNED UNIQUE PRIMARY KEY,
name	VARCHAR(50) NOT NULL,
department_id	INT(11) UNSIGNED,
CONSTRAINT fk_categories_department_id FOREIGN KEY (department_id)
REFERENCES departments(id)
);


CREATE TABLE `status`(
id INT(11) UNSIGNED UNIQUE PRIMARY KEY,
label VARCHAR(30) NOT NULL
);

CREATE TABLE reports(
id INT(11) UNSIGNED UNIQUE PRIMARY KEY,
category_id INT(11) UNSIGNED,
status_id INT(11) UNSIGNED,
open_date DATETIME,
close_date DATETIME,
description VARCHAR(200),
user_id INT(11) UNSIGNED,
employee_id INT(11) UNSIGNED,
CONSTRAINT fk_reports_category_id FOREIGN KEY (category_id) 
REFERENCES categories(id),
CONSTRAINT fk_reports_status FOREIGN KEY (status_id) 
REFERENCES `status`(id),
CONSTRAINT fk_reports_users FOREIGN KEY (user_id) 
REFERENCES `users`(id),
CONSTRAINT fk_reports_employee_id FOREIGN KEY (employee_id) 
REFERENCES `employees`(id)
);


--2. Insert
INSERT INTO employees (`id`, `first_name`, `last_name`, `gender`, `birthdate`, `department_id`)
VALUES (1, 'Marlo', 'O\'Malley', 'M', '1958-9-21', 1),
(2, 'Niki', 'Stanaghan', 'F', '1969-11-26', 4),
(3, 'Ayrton', 'Senna', 'M', '1960-3-21', 9),
(4, 'Ronnie', 'Peterson', 'M', '1944-2-14', 9),
(5, 'Giovanna', 'Amati', 'f', '1959-7-20', 5);

INSERT INTO reports (`id`, `category_id`, `status_id`, `open_date`, `close_date`, `description`, `user_id`, `employee_id`)
VALUES
(1, 1, 1, '2017-04-13', NULL, 'Stuck Road on Str.133', 6, 2),
(2, 6, 3, '2015-09-05', '2015-12-06', 'Charity trail running', 3, 5),
(3, 14, 2, '2015-09-07', NULL, 'Falling bricks on Str.58', 5, 2),
(4, 4, 3, '2017-07-03', '2017-07-06', 'Cut off streetlight on Str.11', 1, 1);


-- 3. Update
UPDATE reports AS r
SET r.status_id = 2
WHERE r.status_id = 1 AND r.category_id = 4;


-- 4. Delete
DELETE FROM reports
WHERE status_id = 4;

-- 5. Users by Age
SELECT u.username, u.age FROM users AS u
ORDER BY u.age, u.username DESC;

-- 6. Unassigned Reports

SELECT r.description, r.open_date FROM reports AS r
WHERE r.employee_id IS NULL
ORDER BY r.open_date, r.description;


--  7. Employees and Reports

SELECT e.first_name, e.last_name, r.description, DATE_FORMAT(r.open_date, '%Y-%m-%d') AS `open_date`
 FROM reports AS r JOIN employees AS e ON r.employee_id = e.id
WHERE r.employee_id IS NOT NULL
ORDER BY e.id, r.open_date, r.id;

--  8. Most Reported Category

SELECT  c.name, COUNT(r.category_id) AS 'reports_number' 
FROM categories AS c JOIN reports AS r ON c.id = r.category_id
GROUP BY r.category_id
ORDER BY reports_number, c.name;

--  9. One Category Employees
SELECT c.name, COUNT(e.id) AS 'count'
FROM categories AS c JOIN employees AS e ON c.department_id = e.department_id
GROUP BY c.name


--  10. Birthday Report
SELECT c.name  
FROM categories AS c JOIN reports AS r ON c.id = r.category_id JOIN users AS u ON r.user_id=u.id
WHERE DATE_FORMAT(r.open_date, '%m-%d') = DATE_FORMAT(u.birthdate, '%m-%d')
GROUP BY c.name
ORDER BY c.name

-- 11. Users per Employee
SELECT CONCAT_WS(' ', e.first_name, e.last_name) AS 'name' , COUNT(r.user_id) AS 'users_count'

FROM employees AS e 
	LEFT JOIN reports AS r on e.id = r.employee_id
GROUP BY `name`
ORDER BY `users_count` DESC, `name`;



--  12. Emergency Patrol
SELECT r.open_date, r.description, u.email
FROM reports AS r
	JOIN users AS u ON u.id = r.user_id
		JOIN categories AS c ON c.id = r.category_id
WHERE r.close_date IS NULL AND
	CHAR_LENGTH(r.description) > 20 AND
		r.description LIKE ('%str%') AND
			c.department_id IN (1,4,5)
ORDER BY r.open_date, u.email, r.id;


-- 13. Numbers Coincidence
лесно решение:

SELECT DISTINCT u.username
FROM users AS u 
	JOIN reports AS r ON r.user_id = u.id
WHERE r.category_id = LEFT(u.username,1) OR
r.category_id = RIGHT(u.username,1)
ORDER BY u.username ASC

глупаво решение:

SELECT DISTINCT u.username
FROM users AS u 
	JOIN reports AS r ON r.user_id = u.id
WHERE (u.username regexp binary '^[0-9]' 
	AND LEFT(u.username,1) = CAST(r.category_id AS CHAR(50)))
OR (u.username regexp binary '[0-9]$' 
	AND RIGHT(u.username,1) = CAST(r.category_id AS CHAR(50)))
ORDER BY u.username ASC

-- 14. Open/Closed Statistics

SELECT name, CONCAT(cnt_closed, '/', cnt_open) AS 'closed_open_reports' 
FROM (SELECT
	CONCAT(e.first_name, ' ', e.last_name) AS name,
	COUNT(
         CASE
             WHEN YEAR(close_date) = 2016 THEN 'closed'
             WHEN YEAR(open_date) < 2016 AND YEAR(close_date) = 2016 THEN 'closed'
         END) cnt_closed,
	COUNT(
          CASE
                WHEN YEAR(open_date) = 2016 THEN 'open'
           END) AS cnt_open
FROM reports r
JOIN employees e
ON r.employee_id = e.id  
GROUP BY name
HAVING cnt_open > 0 OR cnt_closed > 0) AS select_count
 
ORDER BY select_count.name;



-- 15. Average Closing Time

SELECT d.name AS 'department_name', 
	CASE 
		WHEN SUM(TIMESTAMPDIFF(DAY, r.open_date, r.close_date)) IS NULL THEN 'no info'
		ELSE FLOOR(AVG(TIMESTAMPDIFF(DAY, r.open_date, r.close_date))) 
	END AS 'average_duration'
FROM departments AS d 
	JOIN categories AS cat ON d.id = cat.department_id
	JOIN reports AS r ON cat.id = r.category_id
GROUP BY d.name
ORDER BY d.name




https://youtu.be/JO80qrVAARY?t=11000













