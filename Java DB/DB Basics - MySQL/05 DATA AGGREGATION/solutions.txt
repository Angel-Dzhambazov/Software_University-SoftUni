05 - Data Aggregation - Exercise

-- PROBLEM 01:
SELECT COUNT(w.id) AS 'count' FROM wizzard_deposits AS w; 


-- PROBLEM 02:
SELECT MAX(w.magic_wand_size) AS 'longest_magic_wand' FROM wizzard_deposits AS w; 

-- PROBLEM 03:
SELECT w.deposit_group, MAX(w.magic_wand_size) AS 'longest_magic_wand' FROM wizzard_deposits AS w
GROUP BY w.deposit_group
ORDER BY longest_magic_wand, w.deposit_group;



-- PROBLEM 04:
SELECT w.deposit_group FROM wizzard_deposits AS w
GROUP BY w.deposit_group
ORDER BY AVG(w.magic_wand_size) LIMIT 1;

-- PROBLEM 05:
SELECT w.deposit_group, SUM(w.deposit_amount) AS 'total_sum' FROM wizzard_deposits AS w
GROUP BY w.deposit_group
ORDER BY total_sum;

-- PROBLEM 06:
SELECT w.deposit_group, SUM(w.deposit_amount) AS 'total_sum' FROM wizzard_deposits AS w
WHERE w.magic_wand_creator LIKE('Ollivander family')
GROUP BY w.deposit_group
ORDER BY w.deposit_group;

-- PROBLEM 07:
SELECT w.deposit_group, ROUND(SUM(w.deposit_amount),2) AS 'total_sum' FROM wizzard_deposits AS w
WHERE w.magic_wand_creator LIKE('Ollivander family')
GROUP BY w.deposit_group
HAVING `total_sum`<150000
ORDER BY `total_sum` DESC;


-- PROBLEM 08:
SELECT w.deposit_group, w.magic_wand_creator, MIN(w.deposit_charge) AS 'min_deposit_charge' FROM wizzard_deposits AS w
GROUP BY w.deposit_group, w.magic_wand_creator
ORDER BY w.magic_wand_creator, w.deposit_group;


-- PROBLEM 09:
SELECT CASE 
		WHEN w.age<11 THEN '[0-10]'
		WHEN w.age<21 THEN '[11-20]'
		WHEN w.age<31 THEN '[21-30]'
		WHEN w.age<41 THEN '[31-40]'
		WHEN w.age<51 THEN '[41-50]'
		WHEN w.age<61 THEN '[51-60]'
		ELSE '[61+]' END AS 'age_group',
		COUNT(w.age) AS 'wizard_count'
	FROM wizzard_deposits AS w
GROUP BY `age_group`;


-- PROBLEM 10:
SELECT DISTINCT LEFT (w.first_name,1) AS 'first_letter' FROM wizzard_deposits AS w
WHERE w.deposit_group LIKE 'Troll Chest'
GROUP BY first_letter;



-- PROBLEM 11:
SELECT w.deposit_group, w.is_deposit_expired, AVG(w.deposit_interest) AS 'average_interest' FROM wizzard_deposits AS w
WHERE (w.deposit_start_date)>'1985-01-01'
GROUP BY w.deposit_group, w.is_deposit_expired
ORDER BY w.deposit_group DESC;

-- PROBLEM 12:
SELECT SUM(poorRichWizzard.difference) FROM (
	SELECT w1.first_name AS 'host_wizard', w1.deposit_amount AS 'host_wizard_deposit',
		w2.first_name AS 'guest_wizard', w2.deposit_amount AS 'guest_wizard_deposit', (w1.deposit_amount - w2.deposit_amount) AS 'difference'
	FROM wizzard_deposits AS w1,wizzard_deposits AS w2	
	WHERE w1.id = w2.id -1) AS poorRichWizzard;

-- PROBLEM 13:
SELECT e.department_id, MIN(e.salary) FROM employees AS e
WHERE e.department_id IN(2,5,7)
GROUP BY e.department_id;


-- PROBLEM 14:
UPDATE employees AS e
SET e.salary = e.salary+5000
WHERE e.department_id = 1 AND e.salary >30000;

SELECT e.department_id, AVG(e.salary) AS 'avg_salary' FROM employees AS e
WHERE e.salary >30000 AND (e.manager_id !=42 OR e.manager_id IS NULL)
GROUP BY e.department_id;


-- PROBLEM 15:

SELECT e.department_id, MAX(e.salary) AS 'max_salary' FROM employees AS e
GROUP BY e.department_id
HAVING MAX(e.salary) NOT BETWEEN 30000 AND 70000;

!!! Ползва се having, защото е "агрегираща" операция и целта е максималната заплата да не е в 30к-70к, 
а ако е с WHERE вади най-високата заплата извън този диапазон и имаме излишни данни:

SELECT e.department_id, MAX(e.salary) AS 'max_salary' FROM employees AS e
WHERE e.salary NOT BETWEEN 30000 AND 70000
GROUP BY e.department_id;


-- PROBLEM 16:
SELECT COUNT(*) FROM employees AS e
WHERE e.manager_id IS NULL;


-- PROBLEM 17:
SELECT 
    `department_id`,
    (SELECT DISTINCT
            `e2`.`salary`
        FROM
            `employees` AS `e2`
        WHERE
            `e2`.`department_id` = `e1`.`department_id`
        ORDER BY `e2`.`salary` DESC
        LIMIT 2 , 1) AS `third_highest_salary`
FROM
    `employees` AS `e1`
GROUP BY `department_id`
HAVING `third_highest_salary` IS NOT NULL;


-- PROBLEM 18:
select em.first_name, em.last_name, em.department_id
from employees as em
join
(select e.department_id, avg(e.salary) as avg_salary
from employees as e
group by e.department_id) as avg_salaries
on em.department_id = avg_salaries.department_id
where em.salary > avg_salaries.avg_salary
order by em.department_id
limit 10;


-- PROBLEM 19:









